{
	"@metadata": {
		"author": "carlosperate",
		"lastupdated": "2019-05-01 21:09:35.318000",
		"locale": "en",
		"messagedocumentation" : "qqq_ardublockly"
	},
	"ARD_TYPE_CHAR": "Character",
	"ARD_TYPE_TEXT": "Text",
	"ARD_TYPE_BOOL": "Boolean",
	"ARD_TYPE_SHORT": "Short Number",
	"ARD_TYPE_NUMBER": "Number",
	"ARD_TYPE_LONG": "Large Number",
	"ARD_TYPE_DECIMAL": "Decimal",
	"ARD_TYPE_ARRAY": "Array",
	"ARD_TYPE_NULL": "Null",
	"ARD_TYPE_UNDEF": "Undefined",
	"ARD_TYPE_CHILDBLOCKMISSING": "ChildBlockMissing",
	"ARD_HIGH": "HIGH",
	"ARD_LOW": "LOW",
	"ARD_ANALOGREAD": "read analog pin#",
	"ARD_ANALOGREAD_TIP": "Return value between 0 and 1024",
	"ARD_ANALOGWRITE": "set analog pin#",
	"ARD_ANALOGWRITE_TIP": "Write analog value between 0 and 255 to a specific PWM Port",
	"ARD_HIGHLOW_TIP": "Set a pin state logic High or Low.",
	"ARD_DIGITALREAD": "read digital pin#",
	"ARD_DIGITALREAD_TIP": "Read digital value on a pin: HIGH or LOW",
	"ARD_DIGITALWRITE": "set digitial pin#",
	"ARD_WRITE_TO": "to",
	"ARD_DIGITALWRITE_TIP": "Write digital value HIGH or LOW to a specific Port",
	"ARD_BUILTIN_LED": "set built-in LED",
	"ARD_BUILTIN_LED_TIP": "Light on or off for the built-in LED of the Arduino",
	"ARD_DEFINE": "Define",
	"ARD_TONE_PIN": "Tone PIN#",
	"ARD_TONE_FREQ": "frequency",
	"ARD_TONE_PIN_TIP": "Generate audio tones on a pin",
	"ARD_NOTONE_PIN": "No tone PIN#",
	"ARD_NOTONE_PIN_TIP": "Stop generating a tone on a pin",
	"ARD_HALL_TEXT": "read magnet sensor",
	"ARD_HALL_TIP": "reads the hall sensor of an ESP32",
	"ARD_IFTTT_SETUP": "Setup IFTTT Webhook",
	"ARD_IFTTT_WEBHOOK_NAME": "myIFTTTWebhook",
	"ARD_IFTTT_SETUP2": ":",
	"ARD_IFTTT_KEY": "API Key",
	"ARD_IFTTT_NAME": "Webhook name",
	"ARD_IFTTT_SETUP_TIP": "Create a IFTTT Webhook you can trigger later.",
	"ARD_IFTTT_TRIGGER": "trigger",
	"ARD_IFTTT_TRIGGER_TIP": "Trigger a IFTTT webhook.",
	"ARD_IFTTT_TRIGGER_MSG_1": "Message 1",
	"ARD_IFTTT_TRIGGER_MSG_2": "Message 2",
	"ARD_IFTTT_TRIGGER_MSG_3": "Message 3",
	"ARD_IFTTT_TRIGGER_MSG_TIP": "Trigger a IFTTT webhook with up to tree messages.",
	"ARD_IR_CHECK_PIN": "Pin",
	"ARD_IR_CHECK": "got IR signal?",
	"ARD_IR_CHECK_TIP": "chose the IR pin where you want a result from",
	"ARD_IR_RESULT": "received IR signal from Pin",
	"ARD_IR_RESULT_TIP": "chose the IR pin where you got a result",
	"ARD_MAP": "Map",
	"ARD_MAP_IN_MIN": "from min",
	"ARD_MAP_IN_MAX": "max",
	"ARD_MAP_OUT_MIN": "to min",
	"ARD_MAP_OUT_MAX": "max",
	"ARD_MAP_TIP": "Re-maps a number from [min-max] to another.",
	"ARD_FUN_RUN_SETUP": "Arduino run first:",
	"ARD_FUN_RUN_LOOP": "Arduino loop forever:",
	"ARD_FUN_RUN_TIP": "Defines the Arduino setup() and loop() functions.",
	"ARD_PIN_WARN1": "Pin %1 is needed for %2 as pin %3. Already used as %4.",
	"ARD_SERIAL_SETUP": "Setup",
	"ARD_SERIAL_SPEED": ":  speed to",
	"ARD_SERIAL_BPS": "bps",
	"ARD_SERIAL_SETUP_TIP": "Selects the speed for a specific Serial peripheral",
	"ARD_SERIAL_PRINT": "print",
	"ARD_SERIAL_PRINT_NEWLINE": "add new line",
	"ARD_SERIAL_PRINT_TIP": "Prints data to the console/serial port as human-readable ASCII text.",
	"ARD_SERIAL_PRINT_WARN": "A setup block for %1 must be added to the workspace to use this block!",
	"ARD_NEOPIXEL_TIP": "Connect to a NeoPixel LED strip",
	"ARD_NEOPIXEL_0": "Setup led strip",
	"ARD_NEOPIXEL_1": "myLedStrip",
	"ARD_NEOPIXEL_2": ":",
	"ARD_NEOPIXEL_3": "Data pin",
	"ARD_NEOPIXEL_4": "Number of leds",
	"ARD_NEOPIXEL_5": "Set RGB LED",
	"ARD_NEOPIXEL_6": "At position:",
	"ARD_NEOPIXEL_7": "Red:",
	"ARD_NEOPIXEL_8": "Green:",
	"ARD_NEOPIXEL_9": "Blue:",
	"ARD_NEOPIXEL_10": "show RGB LEDs",
	"ARD_NEOPIXEL_11": "Hue:",
	"ARD_NEOPIXEL_12": "Saturation:",
	"ARD_NEOPIXEL_13": "Value:",
	"ARD_SERVO_WRITE": "set SERVO from Pin",
	"ARD_SERVO_WRITE_TO": "to",
	"ARD_SERVO_WRITE_DEG_180": "Degrees (0~180)",
	"ARD_SERVO_WRITE_TIP": "Set a Servo to an specified angle",
	"ARD_SERVO_READ": "read SERVO from PIN#",
	"ARD_SERVO_READ_TIP": "Read a Servo angle",
	"ARD_SPI_SETUP": "Setup",
	"ARD_SPI_SETUP_CONF": "configuration:",
	"ARD_SPI_SETUP_SHIFT": "data shift",
	"ARD_SPI_SETUP_MSBFIRST": "MSBFIRST",
	"ARD_SPI_SETUP_LSBFIRST": "LSBFIRST",
	"ARD_SPI_SETUP_DIVIDE": "clock divide",
	"ARD_SPI_SETUP_MODE": "SPI mode (idle - edge)",
	"ARD_SPI_SETUP_MODE0": "0 (Low - Falling)",
	"ARD_SPI_SETUP_MODE1": "1 (Low - Rising)",
	"ARD_SPI_SETUP_MODE2": "2 (High - Falling)",
	"ARD_SPI_SETUP_MODE3": "3 (High - Rising)",
	"ARD_SPI_SETUP_TIP": "Configures the SPI peripheral.",
	"ARD_SPI_TRANS_NONE": "none",
	"ARD_SPI_TRANS_VAL": "transfer",
	"ARD_SPI_TRANS_SLAVE": "to slave pin",
	"ARD_SPI_TRANS_TIP": "Send a SPI message to an specified slave device.",
	"ARD_SPI_TRANS_WARN1": "A setup block for %1 must be added to the workspace to use this block!",
	"ARD_SPI_TRANS_WARN2": "Old pin value %1 is no longer available.",
	"ARD_SPI_TRANSRETURN_TIP": "Send a SPI message to an specified slave device and get data back.",
	"ARD_STEPPER_SETUP": "Setup stepper motor",
	"ARD_STEPPER_MOTOR": "stepper motor:",
	"ARD_STEPPER_DEFAULT_NAME": "MyStepper",
	"ARD_STEPPER_NUMBER_OF_PINS": "Number of pins",
	"ARD_STEPPER_TWO_PINS": "2",
	"ARD_STEPPER_FOUR_PINS": "4",
	"ARD_STEPPER_PIN1": "pin1#",
	"ARD_STEPPER_PIN2": "pin2#",
	"ARD_STEPPER_PIN3": "pin3#",
	"ARD_STEPPER_PIN4": "pin4#",
	"ARD_STEPPER_REVOLVS": "how many steps per revolution",
	"ARD_STEPPER_SPEED": "set speed (rpm) to",
	"ARD_STEPPER_SETUP_TIP": "Configures a stepper motor pinout and other settings.",
	"ARD_STEPPER_STEP": "move stepper",
	"ARD_STEPPER_STEPS": "steps",
	"ARD_STEPPER_STEP_TIP": "Turns the stepper motor a specific number of steps.",
	"ARD_STEPPER_COMPONENT": "stepper",
	"ARD_DS18B20_SETUP": "Setup temperatur sensor",
	"ARD_DS18B20_SETUP2": ":",
	"ARD_DS18B20_PIN": "pin",
	"ARD_DS18B20_DEFAULT_NAME": "MyTempSensor",
	"ARD_DS18B20_SETUP_TIP": "Setup DS18B20 temperatur sensor",
	"ARD_DS18B20_MEASURE_MEASURE": "Measure",
	"ARD_DS18B20_MEASURE_TIP": "Tell the sensor to measure the temperature",
	"ARD_DS18B20_GET_TEMP_GET": "Get temperature of",
	"ARD_DS18B20_GET_TEMP_TIP": "Get the temperature value in °C of the last measurement",
	"ARD_COMPONENT_WARN1": "A %1 configuration block with the same %2 name must be added to use this block!",
	"ARD_THING_SPEAK_SEND": "Send value to ThingSpeak",
	"ARD_THING_SPEAK_KEY": "Key:",
	"ARD_THING_SPEAK_CHANNEL": "Channel:",
	"ARD_THING_SPEAK_FIELD": "Field:",
	"ARD_THING_SPEAK_VALUE": "Value:",
	"ARD_TIME_DELAY": "wait",
	"ARD_TIME_MS": "milliseconds",
	"ARD_TIME_DELAY_TIP": "Wait specific time in milliseconds",
	"ARD_TIME_DELAY_MICROS": "microseconds",
	"ARD_TIME_DELAY_MICRO_TIP": "Wait specific time in microseconds",
	"ARD_TIME_MILLIS": "current elapsed Time (milliseconds)",
	"ARD_TIME_MILLIS_TIP": "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer",
	"ARD_TIME_MICROS": "current elapsed Time (microseconds)",
	"ARD_TIME_MICROS_TIP": "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer",
	"ARD_TIME_INF": "wait forever (end program)",
	"ARD_TIME_INF_TIP": "Wait indefinitely, stopping the program.",
	"ARD_TIME_WIFI_SET": "set time via wifi",
	"ARD_TIME_WIFI_SET_TIP": "Sets the system time using time servers. Uses Wifi of the ESP32.",
	"ARD_TIME_DROPDOWN_YEAR": "year",
	"ARD_TIME_DROPDOWN_MONTH": "month",
	"ARD_TIME_DROPDOWN_DAY_OF_MONTH": "day of month",
	"ARD_TIME_DROPDOWN_HOUR": "hour",
	"ARD_TIME_DROPDOWN_MIN": "minute",
	"ARD_TIME_DROPDOWN_SEC": "second",
	"ARD_TIME_GET_CURRENT": "get the current",
	"ARD_TIME_GET_CURRENT_TIP": "Returns the current second. Can be set by the 'Set time via wifi' block.",
	"ARD_VAR_AS": "as",
	"ARD_VAR_AS_TIP": "Sets a value to a specific type",
	"ARD_WIFI_WIFI": "Connect to Wifi:",
	"ARD_WIFI_SSID": "WLAN name",
	"ARD_WIFI_PASSWORD": "WLAN password",
	"ARD_WIFI_TIP": "Connect to your wifi",
	"ARD_PULSE_READ": "measure %1 pulse on pin #%2",
	"ARD_PULSE_READ_TIMEOUT": "measure %1 pulse on pin #%2 (timeout after %3 μs)",
	"ARD_PULSE_TIP": "Measures the duration of a pulse on the selected pin.",
	"ARD_PULSETIMEOUT_TIP": "Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.",
	"ARD_TOUCH_WARN": "This board has no touch sensors",
	"ARD_TOUCH_READ_MSG": "Read touch sensor",
	"ARD_TOUCH_READ_TIP": "Read touch sensor of ESP32. Values get smaller if touched.",
	"ARD_TOUCH_WAS_TOUCHED_MSG": "was touched?",
	"ARD_TOUCH_WAS_TOUCHED_TIP": "Check if a touch sensor of the ESP32 was touched (since the last time this was checked).",
	"ARD_SETTONE": "Set tone on pin #",
	"ARD_TONEFREQ": "at frequency",
	"ARD_TONE_TIP": "Sets tone on pin to specified frequency within range 31 - 65535",
	"ARD_TONE_WARNING": "Frequency must be in range 31 - 65535",
	"ARD_NOTONE": "Turn off tone on pin #",
	"ARD_NOTONE_TIP": "Turns the tone off on the selected pin",
	"NEW_INSTANCE": "New instance...",
	"RENAME_INSTANCE": "Rename instance...",
	"NEW_INSTANCE_TITLE": "New instance name:",
	"RENAME_INSTANCE_TITLE": "Rename all '%1' instances to:"
}
